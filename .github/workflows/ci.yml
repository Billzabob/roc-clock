on: 
  pull_request:
  schedule:
    - cron:  '0 13 * * *'

# this cancels workflows currently in progress if you start a new one
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  build-and-test:
    runs-on: [ubuntu-20.04]
    steps:
      - uses: actions/checkout@v3

      # note: moving this step to a bash script will not work, the GITHUB_TOKEN is not passed properly
      - name: Fetch releases data and save to file. Authorization is used to prevent rate limiting.
        run: |
          curl --request GET \
          --url https://api.github.com/repos/roc-lang/roc/releases \
          --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
          --header 'content-type: application/json' \
          --output roc_releases.json

      - run: echo "ROC_RELEASE_URL=$(./ci/get_latest_release_url.sh linux_x86_64)" >> $GITHUB_ENV

      - name: Get the archive from the url.
        run: curl -OL ${{ env.ROC_RELEASE_URL }}

      - name: rename nightly tar
        run: mv $(ls | grep "roc_nightly.*tar\.gz") roc_nightly.tar.gz

      - name: decompress the tar
        run: tar -xzf roc_nightly.tar.gz

      - run: rm roc_nightly.tar.gz

      - name: simplify nightly folder name
        run: mv roc_nightly* roc_nightly

      # <-- START BUILD TESTS
      # - run: ./roc_nightly/roc build ./file-test.roc

      # --linker=legacy because 3609
      #- run: ./roc_nightly/roc build ./examples/args.roc --linker=legacy

      #- run: ./roc_nightly/roc build ./examples/countdown.roc

      #- run: ./roc_nightly/roc build ./examples/echo.roc

      #- run: ./roc_nightly/roc build ./examples/env.roc

      #- run: ./roc_nightly/roc build ./examples/file.roc

      #- run: ./roc_nightly/roc build ./examples/form.roc

      #- run: ./roc_nightly/roc build ./examples/http-get.roc
      # END BUILD TESTS -->

      # <-- START RUN TESTS
      - env:
          EDITOR: nano
          SHLVL: 2
          LETTERS: a,c,e,j
        run: |
          ./roc_nightly/roc run ./examples/env.roc
          cmp env_received_out.txt ci/expected_outputs/env_correct_out.txt

      # <-- END RUN TESTS

# TODO clippy, rustfmt, roc fmt check

